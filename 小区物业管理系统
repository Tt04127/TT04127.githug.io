#define _CRT_SECURE_NO_WARNINGS ��
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<Windows.h>
#include<malloc.h>

void saveinfofile(const char* fileName, struct Node* headNode);
void readinfofile(const char* fileName, struct Node* headNode);
 struct host //�����Ļ�����Ϣ
{
	char name[10];
    char sex[10];
	char sf[18];
	char phone[11];
	char LDroom[20];
	float  area;
	float  price;
    float  waitmoney;
	float  realmoney;
	float  dabt;
};

                                                                      //���������Ľṹ�壻
struct Node
{
	struct host data;
	struct Node* next;
};
struct Node* list=NULL;

                                                                     //��ʼ�����ݺ�next��������ͷ��
struct Node*createhead()
{
	struct Node* headNode = (struct Node*)malloc(sizeof(struct Node));//����ռ�
	headNode->next = NULL;
	return headNode;
}

                                                                     //�������д������ݣ������½ڵ�
 struct Node*createNode(struct host data)
{
	 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	 newNode->data = data;
	 newNode->next = NULL;
	 return newNode;
}
                                                                           
 void  Addhost(struct Node*headNode, struct host data)    //���ӻ�����Ϣ
 {
	 struct Node* newdata = createNode(data);
	 newdata->next = headNode->next;
	 headNode->next = newdata;
 }
 void print(struct Node* headNode)                  //���������Ϣ
 {
	 struct Node* pmove = headNode->next;
	 while (pmove != NULL)
	 {
		 printf("%s\t%s\t%s\t%s\t%s\t   %f\t%f    %f      %f     %f\n",pmove->data.name,pmove->data.sex,pmove->data.sf,pmove->data.phone,pmove->data.LDroom,pmove->data.area,pmove->data.price,pmove->data.waitmoney,pmove->data.realmoney,pmove->data.dabt);
		 pmove = pmove->next;
	 }
 }
void deleteNodeByLDroom(struct Node*headNode,char*LDroom)   //ɾ��������Ϣ
{
	struct Node* posleftNode = headNode;
	struct Node* posNode = headNode->next;
	while (posNode != NULL && strcmp(posNode->data.LDroom, LDroom))
	{
		posleftNode = posNode;
		posNode = posleftNode->next;
	}
	if (posNode == NULL)
	{
		printf("��û�д��û���Ϣ��\n");
		return;
	}
	else
	{
		printf("��ɾ���ɹ�����\n");
		posleftNode->next = posNode->next;
		free(posNode);
		posNode = NULL;
	}
}
struct Node* searchByLDroom(struct Node* headNode, char* LDroom)//���һ�������
{
	struct Node* posNode = headNode->next;
	while (posNode != NULL && strcmp(posNode->data.LDroom, LDroom))
	{
		posNode = posNode->next;
	}
			return posNode;
}
void Finddabthost(struct Node* headNode)//ͳ�ƴӴ�Сδ�ɷѵ����������е�һ��û�н�������⣬Ȼ���ڻ����е�������һ��Ԫ��
{
	for(struct Node*p=headNode->next;p!=NULL;p=p->next)
		for (struct Node* q = headNode->next; q->next != NULL; q = q->next)
		{
			if (q->next->data.dabt > q->data.dabt )
			{
				      struct host  temp = q->next->data;
					  q->next->data=q->data;
					  q->data=temp;

			}
		}
	int a=0;
	struct Node* m= headNode->next;
	while (m != NULL)
	{
		if (m->data.dabt > 0)
		{
			a++;
		}
		m = m->next;
	}
	printf("----------------------------------------------------------------------------------------------------------------------\n");
	printf("����  �Ա�   ����֤��  ��ϵ�绰  ¥�ŵ�Ԫ�ŷ���  ���   ÿƽ����ҵ�۸�   Ӧ�ý�����ҵ��  ʵ�ʽɷ�  ��Ƿ��\n");
	print(headNode);
	printf("\t\t\t\t******����%dλס��û�н�����ҵ��******\n", a);
	printf("----------------------------------------------------------------------------------------------------------------------\n");
}


//�޸�

void Devisehostinfo(struct Node* headNode,char*LDroom)
{
	char nname[10];
	char ssex[10];
	char ssf[18];
	char pphone[11];
	char LLDroom[20];
	float  aarea;
	float  pprice;
	float  wwaitmoney;
	float  rrealmoney;
	float  ddabt;
	struct Node* posNode = headNode->next;
	while (posNode != NULL && strcmp(posNode->data.LDroom, LDroom))
	{
		posNode = posNode->next;
	}
	if (posNode != NULL)
	{
		printf("������������Ҫ�޸ĵ����(1.���� 2.�Ա�3.����֤��4.��ϵ�绰5.¥�ŵ�Ԫ�ŷ��� 6.���7.ÿƽ����ҵ�۸�8.��ǰ��Ӧ�ý�����ҵ��9.ʵ�ʽɷ�10.��Ƿ�� 11.�˳��޸�)��\n");
		int num = 0;
		scanf("%d", &num);
		switch (num) {
		case 1:printf("����������Ҫ�޸ĵ���������\n");
			scanf("%s", nname);
			strcpy(posNode->data.name, nname);
			printf("���޸ĳɹ���\n");
			break;
		case 2:
			printf("����������Ҫ�޸ĵ��ձ𡿣�\n");
			scanf("%s", ssex);
			strcpy(posNode->data.sex, ssex);
			printf("***���޸ĳɹ���\n");
			break;
		case 3:
			printf("��������Ҫ�޸ĵ�����֤�ţ�\n");
			scanf("%s", ssf);
			strcpy(posNode->data.sf, ssf);
			printf("���޸ĳɹ���\n");
			break;
		case 4:
			printf("***����������Ҫ�޸ĵĵ绰����\n");
			scanf("%s", pphone);
			strcpy(posNode->data.phone, pphone);
			printf("���޸ĳɹ���\n");
			break;
		case 5:
			printf("***����������Ҫ�޸ĵ�¥�ŵ�Ԫ�ŷ���š���\n");
			scanf("%s", LLDroom);
			strcpy(posNode->data.LDroom, LLDroom);
			printf("���޸ĳɹ���\n");
			break;
		case 6:
			printf("**����������Ҫ�޸ĵ��������\n");
			scanf("%f", &aarea);
			if (posNode->data.area != aarea)
			{
				float temp;
				temp = posNode->data.area;
				posNode->data.area = aarea;
				aarea = temp;
			}
			printf("*���޸ĳɹ���\n");
			break;
		case 7:
			printf("***����������Ҫ�޸ĵ�ÿƽ����ҵ�Ѽ۸񡿣�\n");
			scanf("%f", &pprice);
			//strcpy(headNode->data.price, price);
			if (posNode->data.price != pprice)
			{
				float temp;
				temp = posNode->data.price;
				posNode->data.price = pprice;
				pprice = temp;
			}
			printf("���޸ĳɹ���\n");
			break;
		case 8:
			printf("����������Ҫ�޸ĵĵ�ǰӦ�ý�����ҵ�ѡ���\n");
			scanf("%f", &wwaitmoney);
			if (posNode->data.waitmoney != wwaitmoney)
			{
				float temp;
				temp = posNode->data.waitmoney;
				posNode->data.waitmoney = wwaitmoney;
				wwaitmoney = temp;
			}
			printf("\t\t\t\t***���޸ĳɹ���****\n");
			break;
		case 9:
			printf("\t\t\t\t**����������Ҫ�޸ĵ�ʵ�ʽɷѡ�**��\n");
			scanf("%f", &rrealmoney);
			if (posNode->data.realmoney != rrealmoney)
			{
				float temp;
				temp = posNode->data.realmoney;
				posNode->data.realmoney = rrealmoney;
				rrealmoney = temp;
			}
			printf("���޸ĳɹ���\n"); break;
		case 10:
			printf("\t\t\t\t***����������Ҫ�޸ĵ���Ƿ�****��\n");
			scanf("%f", &ddabt);
			if (posNode->data.dabt != ddabt)
			{
				float temp;
				temp = posNode->data.dabt;
				posNode->data.dabt = ddabt;
				ddabt = temp;
			}
			printf("\t\t\t\t*****���޸ĳɹ���*****\n");
			break;
		case 11:
			printf("\t\t\t\t******���˳���******\n");
			printf("*********���˳��޸ĳɹ�����*********\n");
			break;
		case 12:
		default: printf("******��error��*******\n");
			break;
		}
	}
	else
		printf("\t\t\t\t��******��û�и�ס����*****");
   }

//�ɷѹ���
void payfun(struct Node* headNode)
{
	float pay;
	headNode->data.realmoney = 0;
	if (headNode->data.waitmoney > 0)
	{
		printf("\t\t******��������˴ν�����ҵ�ѵĽ��Ϊ��******��\n");
		scanf("%f", &pay);
		headNode->data.realmoney = pay;
		if (pay<=headNode->data.waitmoney)
		{
			headNode->data.dabt = headNode->data.waitmoney-headNode->data.realmoney;
			printf("****���ɷѳɹ�����****");
		}
		else
		{
			printf("*****���˴ν��ɵķ��ó�����Ҫ�Ľ��ɵ���ҵ�ѣ������½��ɡ�******");
		}
	}
	else
	{
		printf("********����ס���������������ҵ�ѡ�********\n");
	}
}


//��ѯס����Ҫ���ɵķ��ú���Ƿ��
void chaxunmoney(struct Node* headNode)
{
	int deta;
	float money;
	int ans;
	printf("\t\t\t\t********����ǰ��ʼ����1��1��,��ס��������ɷѵĽ���ǡ�\n");
	printf("\t\t\t\t******�������뵱ǰ�ɷ��·ݡ���\n");
	scanf("%d", &deta);
	ans = deta - 0;
	money = headNode->data.price * headNode->data.area * ans;
	money = money - headNode->data.realmoney;
	headNode->data.waitmoney = money;
	printf("*****����ס��������ɷѵĽ���ǡ�******��%.1f\n",headNode->data.waitmoney);
}
int DengLu()                       //����Ա��¼
{
	int a = 0;
	char mm[10] = { "hello" };
	char s[10];
	printf("***���������Ա���롿*****:\n");
	//gets(s);
	scanf("%s", &s);
	int c = strcmp(mm, s);
	if (!c)
	{
		a = 1;
	}
	return a;
}
void menue()                //�˵�����
{
	printf("\t\t\t\t\t\n");
	printf("\t\t\t\t\t\n");
    printf("\t\t\t\t***********��ӭ����С����ҵ�ѹ���ϵͳ***********\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t1.������ס����Ϣ��   \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t2.���޸�ס����Ϣ��   \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t3.��ɾ��ס����Ϣ��   \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t4.��ס����Ӧ����ҵ�ѡ�\t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t5.��ͳ��Ƿ��ס����   \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t6.���ɷѡ�          \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t7.�����ס����Ϣ��   \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t|\t\t8.���˳���          \t\t|\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t------------------------------------------------\n");
	printf("\t\t\t\t*��������1-8��*��\n");
}


                                                              //���ļ�����
void saveinfofile(const char* fileName, struct Node* headNode)
{
	FILE* fp = fopen(fileName, "w");
	struct Node* pmove = headNode->next;
    while (pmove != NULL)
	{
		fprintf(fp, "% s\t % s\t % s\t % s\t % s\t % f\t % f\t % f\t % f\t % f\n", pmove->data.name, pmove->data.sex, pmove->data.sf, pmove->data.phone, pmove->data.LDroom, pmove->data.area, pmove->data.price, pmove->data.waitmoney, pmove->data.realmoney, pmove->data.dabt);
		pmove = pmove->next;
	}
	fclose(fp);
}

                                                                  //���ļ�����
void readinfofile(const char* fileName, struct Node* headNode)
{
	FILE* fp = fopen(fileName, "r");
	struct host tempData;
	if (fp == NULL)
	{
		fp = fopen(fileName, "w+");
	}
	while (fscanf(fp, "%s%s%s%s%s%f%f%f%f%f\n", tempData.name, tempData.sex, tempData.sf, tempData.phone, tempData.LDroom, &tempData.area, &tempData.price, &tempData.waitmoney, &tempData.realmoney, &tempData.dabt) != EOF)
	{
		Addhost(list, tempData);
	}
	fclose(fp);
}

void funselect()                //����ѡ�񽻻�
{
	struct Node* result = NULL;
	struct host temphost;//��ʱ��������
	int keynum = 0;
	scanf("%d", &keynum);
	switch (keynum)
	{
	case 1:
		printf("*�Ƿ�Ҫ���ӻ�����Ϣ*\n");
		char c;
		getchar();
		scanf("%c",&c);
		if (c=='Y')
		{
			printf("\t\t\t\t\t****������ס����Ϣ��****\n");
			printf("****�������뻧���Ļ�����Ϣ(���� �Ա� ����֤�� ��ϵ�绰 ¥�ŵ�Ԫ�ŷ��� ��� ÿƽ����ҵ�۸� Ӧ�ý�����ҵ�� ʵ�ʽ��� ��Ƿ��)��*��\n");
			scanf("%s%s%s%s%s%f%f%f%f%f", temphost.name, temphost.sex, temphost.sf, temphost.phone, temphost.LDroom, &temphost.area, &temphost.price, &temphost.waitmoney, &temphost.realmoney, &temphost.dabt);
			Addhost(list, temphost);
			saveinfofile("hostinfofile.txt", list);
			printf("���ӳɹ���");
			break;
		}
		else
		{
			break;
		}
	case 2:
		printf("*�Ƿ�Ҫ�޸Ļ�����Ϣ*\n");
		char c1;
		getchar();
		scanf("%c", &c1);
		if (c1 == 'Y')
		{
			printf("\t\t\t\t\t******���޸�ס����Ϣ��*****\n");
			printf("******����������Ҫ�޸ĵĻ�����¥�ŵ�Ԫ�ŷ��š�******\n");
			scanf("%s", temphost.LDroom);
			Devisehostinfo(list, temphost.LDroom);
			saveinfofile("hostinfofile.txt", list);
			break;
		}
		else
		{
			break;
		}
	case 3:
		printf("*�Ƿ�Ҫɾ��������Ϣ*\n");
		char c2;
		getchar();
		scanf("%c", &c2);
		if (c2== 'Y')
		{
			printf("\t\t\t\t\t*****��ɾ��ס����Ϣ��*****\n");
			printf("******����������Ҫɾ���Ļ����ĵ�Ԫ¥����š�******��\n");
			scanf("%s", temphost.LDroom);
			deleteNodeByLDroom(list, temphost.LDroom);
			saveinfofile("hostinfofile.txt", list);
			break;
		}
		else {
			break;
		}
	case 4:
		printf("*�Ƿ�Ҫ��ѯ�������ҵ����Ϣ*\n");
		char c3;
		getchar();
		scanf("%c", &c3);
		if (c3 == 'Y')
		{
			printf("\t\t\t\t\t******��ס���������ҵ�ѡ�*****\n");
			printf("******����������Ҫ�鿴�ɷѵĻ�����Ԫ��¥�ŷ���š�*******��\n");
			scanf("%s", temphost.LDroom);
			result = searchByLDroom(list, temphost.LDroom);
			if (result == NULL)
			{
				printf("*******���û��������ڡ�******");
			}
			else
			{
				chaxunmoney(result);
				saveinfofile("hostinfofile.txt", list);
			}
			break;
		}
		else {
			break;
		}
	case 5:
		printf("*�Ƿ�Ҫͳ��Ƿ��ҵ�ѻ���*\n");
		char c4;
		getchar();
		scanf("%c", &c4);
		if (c4 == 'Y')
		{
			printf("\t\t\t\t\t******��ͳ��Ƿ��ס�� ��******\n");
			Finddabthost(list);
			break;
		}
		else {
			break;
		}
	case 6:
		printf("*�Ƿ�Ҫ������ҵ��*\n");
		char c5;
		getchar();
		scanf("%c", &c5);
		if (c5 == 'Y')
		{
			printf("\t\t\t\t\t********���ɷ� ��*******\n");
			printf("*����������Ҫ�ɷѵĻ�����Ԫ��¥�ŷ���š�*��\n");
			scanf("%s", temphost.LDroom);
			result = searchByLDroom(list, temphost.LDroom);
			if (result == NULL)
			{
				printf("*******���û��������ڡ�******");
			}
			else
			{
				payfun(result);
				saveinfofile("hostinfofile.txt", list);
			}
			break;
		}
		else {
			break;
		}
	case 7:
		printf("*�Ƿ�Ҫ���������Ϣ*\n");
		char c6;
		getchar();
		scanf("%c", &c6);
		if (c6 == 'Y')
		{
			printf("\t\t\t\t\t*****�����ס����Ϣ��*****\n");
			printf("----------------------------------------------------------------------------------------------------------------------\n");
			printf("����  �Ա�  ����֤�� ��ϵ�绰 ¥�ŵ�Ԫ�ŷ��� ���  ÿƽ����ҵ�۸�  Ӧ�ý�����ҵ��  ʵ�ʽɷ�   ��Ƿ��\n");
			print(list);
			printf("----------------------------------------------------------------------------------------------------------------------\n");
			break;
		}
		else
		{
			break;
		}
	case 8:
		printf("*�Ƿ�Ҫ�˳���ҵ�ѹ���ϵͳ*\n");
		char c7;
		getchar();
		scanf("%c", &c7);
		if (c7 == 'Y')
		{
			printf("\t\t\t\t\t********���˳���*********\n");
			printf("\t\t\t\t\t********���˳��ɹ�����******");
			exit(0);
			system("pause");
			break;
		}
		else
		{
			break;
		}
	case 9:
	default: printf("\t\t\t\t\t��error��\n");
		     break;
	}
}
                                                                                       //���ļ�����

int main()       //����������
{
	printf("\t\t\t\t\t\n");
	printf("\t\t\t\t\t\n");
	printf("\t\t\t\t\t\n");
	printf("\t\t\t\t\t\n");
	printf("\t\t\t\t*----------��ӭ����С����ҵ�ѹ���ϵͳ--------*\n");
	printf("\n");
	printf("\t\t\t\t\t*-------������Ա��¼��-----------*\n");
	system("color E2");
	list = createhead();
	readinfofile("hostinfofile.txt", list);
	while (1) {
		int a = DengLu();
		if (a) {
			system("cls");
			menue();
			while (1)
			{
				system("cls");
				menue();
				funselect();
			    system("pause");
				
			}
			break;
		}
		else
		{
			printf("\t\t\t\t\t������������������룡��\n");
		}
	}
	system("pause");
	return 0;
}
